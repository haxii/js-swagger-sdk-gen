{{- /*gotype: github.com/haxii/js-swagger-sdk-gen/model.Swagger*/ -}}
/* eslint-disable */
{{- if .GenConf.CommonJS }}
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
{{- end }}
let instance
let domain = ''

function createAxios(axios){instance=axios}
function getDomain(){return domain}
function setDomain($domain){domain=$domain}
function request(method,url,body,queryParameters,form,_config){if(!instance)throw"you need to init this api by passing the axios instance via createAxios";method=method.toLowerCase();const config=_config||{};config.url=url;config.method=method;config.params=queryParameters;if(form&&Object.keys(form).length>0){if(method==="get"){config.params=Object.assign({},config.params,form)}else{const _form=new FormData;Object.keys(form).forEach((key=>{_form.append(key,form[key])}));config.data=_form}}if(body){config.data=body}return instance.request(config)}

{{- if .GenConf.CommonJS}}
exports.default = createAxios;
exports.createAxios = createAxios;
exports.getDomain = getDomain;
exports.setDomain = setDomain;
exports.request = request;
{{- else}}
export {createAxios as default, createAxios, getDomain, setDomain, request};
{{- end}}

{{range .Operations}}
/**
* {{.Comment}}
{{ if .HasAPIDocURL}}
* **request**: {@link {{.APIDocURL}} {{.OperationID}}}
{{ else}}
* **request**: {{.OperationID}}
{{ end}}
* **path**: {{.APIPath}}

* **method**: {{.APIMethodUC}}
    {{ range $ParameterIndex, $Parameter := .Parameters}}
        {{- range $Parameter.Names}}
* @param {{.JS}} - in {{$Parameter.Type}}: {{$Parameter.Comment}}
        {{- end}}
    {{- end}}
*/
const {{.OperationID}} = function(parameters = {}) {
    const domain = parameters.$domain ? parameters.$domain : getDomain()
    const config = parameters.$config
    let path = '{{.APIPath}}'
    let body
    let queryParameters = {}
    let form = {}

    {{- range $ParameterIndex, $Parameter := .Parameters}}
        {{- range $Parameter.Names}}
    if(parameters['{{.JS}}'] !== undefined) {
            {{- if $Parameter.TypeIs.Query}}
        queryParameters['{{.Swagger}}'] = parameters['{{.JS}}']
            {{- end -}}

            {{- if $Parameter.TypeIs.Path}}
        path = path.replace('{{.SwaggerVarInPath}}', `${parameters['{{.JS}}']}`)
            {{- end -}}

            {{- if $Parameter.TypeIs.Body}}
        body = parameters['{{.JS}}']
            {{- end -}}

            {{- if $Parameter.TypeIs.FormData}}
        form['{{.Swagger}}'] = parameters['{{.JS}}']
            {{- end -}}
    }
        {{- end}}
    {{- end}}
    if(parameters.$queryParameters) {
        Object.keys(parameters.$queryParameters).forEach(function(parameterName){
            queryParameters[parameterName] = parameters.$queryParameters[parameterName]
        })
    }
    return request('{{.APIMethodLC}}', domain + path, body, queryParameters, form, config)
}

{{end}}

{{- if .GenConf.CommonJS}}
    {{- range .Operations}}
exports.{{.OperationID}} = {{.OperationID}};
    {{- end}}
{{- else}}
export {
    {{- range .Operations}}
    {{.OperationID}},
    {{- end}}
};
{{- end}}
